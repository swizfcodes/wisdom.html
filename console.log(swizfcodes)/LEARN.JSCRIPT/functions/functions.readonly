JavaScript functions are defined with the function keyword.
You can use a function declaration or a function expression.

Function Declarations
Earlier in this tutorial, 
you learned that functions are declared with the following syntax:

function functionName(parameters) {
  // code to be executed
}
Declared functions are not executed immediately. 
They are "saved for later use", and will be executed later, 
when they are invoked (called upon).

Example
function myFunction(a, b) {
  return a * b;
}

Function Expressions
A JavaScript function can also be defined using an expression.

A function expression can be stored in a variable:

Example
const x = function (a, b) {return a * b};

After a function expression has been stored in a variable, 
the variable can be used as a function:

Example
const x = function (a, b) {return a * b};
let z = x(4, 3);

The Function() Constructor
As you have seen in the previous examples, 
JavaScript functions are defined with the function keyword.

Functions can also be defined with a built-in JavaScript 
function constructor called Function().

Self-Invoking Functions
Function expressions can be made "self-invoking".

A self-invoking expression is invoked (started) automatically, without being called.

Function expressions will execute automatically if the expression is followed by ().

You cannot self-invoke a function declaration.

You have to add parentheses around the function 
to indicate that it is a function expression:

Example
(function () {
  let x = "Hello!!";  // I will invoke myself
})();